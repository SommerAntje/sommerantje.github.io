(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{243:function(e,n){e.exports={attributes:{name:"deploy-nuxt-app-to-github-pages",title:"Deploy a nuxt app to GitHub Pages and host your website",year:"14 May 2021",id:"deploy-nuxt-app-to-github-pages",description:"Deploy a nuxt app to GitHub Pages by creating a workflow through GitHub actions and serve your website from a custom domain"},html:'<p>This blog post documents the steps needed to be exectued in order to deploy a nuxt app (pre-rendering SPA) as static site generator to GitHub Pages and how to serve it as a website from a custom domain.</p>\n<h2>Technologies that I\'ve been using</h2>\n<ul>\n<li>Website and blog built with <em>nuxt.js, vue.js and markdown</em> (pre-rendering SPA)</li>\n<li>GitHub Pages</li>\n<li><a href="https://github.com/peaceiris/actions-gh-pages">Paeceiris GitHub Actions</a></li>\n<li>DNS and CNAME configurations</li>\n</ul>\n<h2>Create a User Page Site on GitHub Pages</h2>\n<p>I wanted to host my tech blog as a website, but being also allowed to publish my blog posts at anytime without much effort by using a continuous deployment workflow, which is why I\'ve chosen to use GitHub actions and to host my blog on GitHub Pages as user page site.</p>\n<p>I already had my blog constantly developed in a private GitHub repository, so I just needed to make the repository public, as I am using GitHub free, where a public repository is required, if you want to create a user page site for your account, <strong>GitHub entitles a user to host at least one User page site per account for free.</strong></p>\n<p>To have a user page site created all I had to do afterwards, was changing the repository name under the settings tab from the project name to <inline-code>your-user-account.github.io</inline-code>.</p>\n<h2>Configure a continous deployment workflow with GitHub Actions</h2>\n<p>As I want my content to be published automatically everytime I update the source code, I introduced a continous deployment workflow to my project using <a href="https://github.com/peaceiris/actions-gh-pages">Paeceiris GitHub Actions</a>.</p>\n<p><image-responsive\n  imageURL="blog/deploy-nuxt-app-to-github-pages/_main.jpg"\n  :width="\'952\'"\n  :height="\'509\'"\n  alt="create user site" /></p>\n<p>This workflow enables me to deploy a static site to GitHub Pages with <a href="https://jamstack.org/generators/">Static Site Generators</a> and also creates a new gh-pages branch automatically, as soon as the corresponding action has been executed.</p>\n<p>To set up a workflow for my nuxt project I had to create a <strong>cd.yml</strong> file inside of my repository like the following</p>\n<p><inline-code>/.github/workflows/cd.yml</inline-code></p>\n<pre><code>  name: cd\n\n  on: \n    push:\n      branches:\n        - master\n  jobs:\n    cd:\n      runs-on: ${{ matrix.os }}\n\n      strategy:\n        matrix:\n          os: [ubuntu-latest]\n          node: [14]\n\n      steps:\n        - name: Checkout\n          uses: actions/checkout@master\n\n        - name: Setup node env\n          uses: actions/setup-node@v2.1.2\n          with:\n            node-version: ${{ matrix.node }}\n\n        - name: Install dependencies\n          run: npm ci\n\n        - name: Generate\n          run: npm run generate\n\n        - name: Deploy\n          uses: peaceiris/actions-gh-pages@v3\n          with:\n            github_token: ${{ secrets.GITHUB_TOKEN }}\n            publish_dir: ./dist\n            cname: antje-sommer.de\n</code></pre>\n<h2>Configure a deployment target to enable nuxt for static hosting</h2>\n<p>For static sites add <inline-code>target: static</inline-code> to your <strong>nuxt.config.js</strong>, as Nuxt.js also works as a static site generator.</p>\n<pre><code> module.exports = {\n   env: {\n     baseUrl,\n     productionUrl\n   },\n   target: \'static\',\n</code></pre>\n<p>The nuxt <inline-code>generate</inline-code> command will generate a static version of your website. It will generate HTML for every one of your routes and put it inside of its own file in the <strong>dist/ directory</strong></p>\n<pre><code> generate: {\n    routes: [\n      \'/en\', \'404\'\n    ]\n    .concat(blogsDe.map(w =&gt; `/blog/${w}`))\n    .concat(blogsEn.map(w =&gt; `/en/blog/${w}`))\n  }\n</code></pre>\n<h2>Configure your User page site to serve static content</h2>\n<p>Go to the <strong>settings tab</strong> in GitHub and navigate to <strong>pages</strong> to set the configuation for the gh-pages branch.</p>\n<p>I selected the <strong>gh-pages branch as source</strong> and <strong>serve the static content from the root</strong> folder, this setting has the benefit of not having to maintain two repositories at the same time, one for holding the source code and one for serving the build artifacts.</p>\n<p><image-responsive\n  imageURL="blog/deploy-nuxt-app-to-github-pages/create_user_site.png"\n  :width="\'952\'"\n  :height="\'509\'"\n  alt="create user site" /></p>\n<p><strong><em>What is the gh-pages branch for?</em></strong></p>\n<p>The gh-pages branch is where GitHub will look for static content to serve, such as build artifacts.</p>\n<p>A gh-pages branch can either be created by command line from your local repository</p>\n<pre><code>git checkout -b gh-pages\ngit push --set-upstream origin gh-pages \n</code></pre>\n<p>or by using <a href="https://github.com/peaceiris/actions-gh-pages">Paeceiris GitHub Actions</a> as part of the configuration of a CD workflow.</p>\n<h2>Serve your website from a custom domain</h2>\n<p>After running a test deployment, my User page site was available on <inline-code>https://sommerantje.github.io</inline-code>.\nNow I wanted to have my custom domain being prompted to my User page site.</p>\n<p><em>Read on GitHub Docs <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">configure a custom domain</a></em></p>\n<p><strong>Configure a custom domain on GitHub</strong></p>\n<p>To configure a custom domain in GitHub, go to the settings tab, navigate to pages and add your custom domain accordingly.</p>\n<p><image-responsive\n  imageURL="blog/deploy-nuxt-app-to-github-pages/custom-domain.jpg"\n  :width="\'952\'"\n  :height="\'509\'"\n  alt="create user site" /></p>\n<p><strong>Set up your DNS and CNAME configuration</strong></p>\n<p><strong><em>What is an apex domain?</em></strong></p>\n<p>An Apex domain, is a root domain that does not contain a subdomain, for example <inline-code>antje-sommer.de</inline-code> is an\napex domain because it doesn\'t have a subdomain.</p>\n<p><inline-code>www.antje-sommer.de</inline-code> is not an apex domain because it contains the subdomain part www.</p>\n<p>To point to an apex domain I use an A record pointing to the server\'s IP.</p>\n<p><strong>Note:</strong></p>\n<p><em>This solution doesn\'t scale and isn\'t viable for cloud platforms, where multiple and frequently changing backends are responsible for responding to requests.</em></p>\n<p><strong><em>What is a CNAME record?</em></strong></p>\n<p>An IP address isnâ€™t always linked with one domain name. Several names can also refer to the same IP address. To enable this, the DNS uses CNAME records.</p>\n<p>A Canonical Name record is a type of resource record in the Domain Name System that maps one domain name to another. This can prove convenient when running multiple services from a single IP address. One can, for example, point <em>ftp.example.com</em> and <em>www.example.com</em> to the DNS entry for <em>example.com</em> , which in turn has an A record which points to the IP address.</p>\n<p>I also use CNAME records for my subdomain pointing to <inline-code>sommerantje.github.io</inline-code>.</p>\n<p>For having these changes be made I had to contact the provider service to add the DNS settings like the following:</p>\n<pre><code>  DNS A Records for my domain antje-sommer.de:\n  // GitHub IPs\n  185.199.108.153\n  185.199.109.153\n  185.199.110.153\n  185.199.111.153\n  \n  A CNAME Record from www.antje-sommer.de to sommerantje.github.io\n\n</code></pre>\n<p><strong>Basically you want to create a mapping like this:</strong></p>\n<p>The apex domain antje-sommer.de points to the GitHub IPs,\nwhile the subdomain www.antje-sommer.de leads to the CNAME sommerantje.github.io, which GitHub points back to the apex domain.</p>\n<p><image-responsive\n  imageURL="blog/deploy-nuxt-app-to-github-pages/dns.png"\n  :width="\'952\'"\n  :height="\'509\'"\n  alt="dns" /></p>\n<p>As last steps I had to set my apex domain to the cname configuration inside the <strong>cd.yml</strong> where I have set up the peaceiris/actions-gh-pages@v3 for the deployment.</p>\n<pre><code>- name: Deploy\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./dist\n        cname: antje-sommer.de\n</code></pre>\n<p><strong>Enforce HTTPS</strong></p>\n<p>After the DNS changes have been added enforce https inside of the GitHub page settings to have your site served from https only.</p>\n<p><image-responsive\n  imageURL="blog/deploy-nuxt-app-to-github-pages/custom_domain_setup.png"\n  :width="\'952\'"\n  :height="\'509\'"\n  alt="create user site" /></p>\n<h2>What problems have I encountered</h2>\n<p><strong>Testing GitHub Actions is not really possible</strong></p>\n<p>I had to perform test deployments with minimal changes to the master branch, for\ntesting my CD.</p>\n<p>This is also how I encountered an issue within my CD configuration, as I had executed a deployment each time when I pushed to master but also with each pull request, caused by the following configuration inside of the <strong>cd.yml</strong>:</p>\n<pre><code>on: \n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n</code></pre>\n<p>I needed pull requests not to trigger a deployment because I am  developing my blog content on WIP:Pull requests as part of my personal workflow.</p>\n<p><strong>Wrong CNAME configuration</strong></p>\n<p>At the beginning I\'ve missed adding my apex domain to the cname configuration within the deployment action.</p>\n<p>That caused a deletation of my custom domain entry within the GitHub pages settings with the consequence that each time a deployment action has been executed my domain entry appears to be empty and therefore my User page site down.</p>\n<pre><code>- name: Deploy\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./dist\n        cname: antje-sommer.de\n</code></pre>\n'}}}]);